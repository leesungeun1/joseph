<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Advice 클래스 빈 생성 -->
	<bean id="traceAdvice" class="message.LogginAdvice" />

	<!-- aop 설정 -->
	<aop:config>

		<!-- Aspect(공통 관심 기능) 설정: Advice를 어떤 Pointcut에 적용할 지 설정 -->
		<!-- ref 속성을 통해 공통기능을 가지고 있는 bean을 연결 한다 -->
		<aop:aspect id="traceAspect" ref="traceAdvice">

			<!-- pointcut 표현식 작성 -->
			<!-- (패키지명이 message이고, 매개변수가 0개 이상인 모든 메서드를 pointcut으로 설정함) -->
			<aop:pointcut id="publicMethod" expression="execution(public * message..*(..))" />

			<!-- around advice를 설정 -->
			<!-- (메서드 수행 이전, 이후, 예외 발생 등 모든 시점에 적용 가능한 Advice 설정) -->
			<aop:around pointcut-ref="publicMethod" method="invoke" /><!-- 
				공통관심사항 메소드 이름 -->
		</aop:aspect>
	</aop:config>
	<!-- 0. 공통 관심사항(로그처리)을 처리하기 위한 Advise 클래스를 생성한다. 1. Main클래스의 main메소드 안에서 
		패키지명이 message이고, 매개변수가 0개 이상인 모든 메소드인 sayHello()가 호출되면, Advice클래스인 LogginAdvice클래스안에 
		들어있는 invoke()메소드가 호출된다. 2. LogginAdvice클래스안에 들어있는 invoke()메소드가 호출되면 "메소드 
		호출 전" 콘솔에 출력됨 "c:\\data\\log.txt" 파일에 Enter Time이 저장됨 joinPoint.proceed(); 
		에 의해서 sayHello()메소드를 호출함 ... 5초뒤에 "메소드 호출 후" 콘솔에 출력됨 "c:\\data\\log.txt" 
		파일에 Exit Time이 저장됨 3. Main클래스의 main메소드 안에서 패키지명이 message이고, 매개변수가 0개 이상인 
		모든 메소드인 calc()가 호출되면, Advice클래스인 LogginAdvice클래스안에 들어있는 invoke()메소드가 호출된다. 
		4. LogginAdvice클래스안에 들어있는 invoke()메소드가 호출되면 "메소드 호출 전" 콘솔에 출력됨 "c:\\data\\log.txt" 
		파일에 Enter Time이 저장됨 joinPoint.proceed();에 의해서 calc()메소드를 호출함 ... 3초뒤에 "메소드 
		호출 후" 콘솔에 출력됨 "c:\\data\\log.txt" 파일에 Exit Time이 저장됨 -->

	<bean id="logic" class="message.Logic" />
	<bean id="service" class="message.Service" />

</beans>









